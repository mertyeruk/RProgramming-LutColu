anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# Veri setinizdeki tüm kelimelere ait duygu puanlarını tespit etme  hata veriyorrrr
lutc_sentiment <- lutc %>%
select(textOriginal) %>%
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>%
anti_join(get_sentiments("bing"), by = "word") %>%
count(word, sentiment, sort = TRUE) %>%
spread(sentiment, n, fill = 0) %>%
top_n(5) # burada, ilk 20 kelimeyi seçin
# Duygu puanlarını gösteren box plot oluşturma
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot() +
coord_flip()
library(NLP)
library(tm)
library(RCurl)
library(magrittr)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(funModeling)
library(lubridate)
library(stringr)
library(tidytext)
library(wordcloud2)
library(wordcloud)
library(RColorBrewer)
library(tibble)
library(tidyr)
library(readr)
library(readxl)
library(ggpubr)
library(formattable)
library(ggstance)
library(psych)
library(GGaly)
lutc_sentiment <- lutc %>%
select(textOriginal) %>%
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment_score = mean(score), sort = TRUE)
#lutc_sentiment kelime filtreleme
lutc_sentiment %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar"))
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(20, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
#emoji sayısını bulma
lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(textDisplay) %>%
summarize(mean_emoji_count = mean(emoji_count)) %>%
slice(1:2) %>% # burada, ilk 20 sonucu seçin
ggplot(aes(x = textDisplay, y = mean_emoji_count)) +
geom_col()
#Emoji olmayan verileri ayrı bir veri setine atama
lutc_no_emoji <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
filter(emoji_count == 0)
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(20, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
#Emoji olmayan verileri ayrı bir veri setine atama
lutc_no_emoji <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
filter(emoji_count == 0)
#emoji tipleri
lutc_emoji_types <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n()) %>%
rename(emoji_type = emoji_count)
#Emoji türlerinin bar chart oluşturma
lutc_emoji_types %>%
ggplot(aes(x = emoji_type, y = count)) +
geom_col()
#emoji tipleri
lutc_emoji_types <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n()) %>%
rename(emoji_type = emoji_count)
#Emoji türlerinin bar chart oluşturma
lutc_emoji_types %>%
ggplot(aes(x = emoji_type, y = count)) +
geom_col()
#emoji anliziiiiiad
lutc_emoji_types <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n()) %>%
rename(emoji_type = emoji_count) %>%
mutate(emoji_type = ifelse(emoji_type == 0, "No Emoji",
ifelse(emoji_type == 1, "1 Emoji",
ifelse(emoji_type >= 2, "2 or More Emojis", NA))))
#emoji line chart
lutc_emoji_counts <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n())
lutc_emoji_counts %>%
ggplot(aes(x = emoji_count, y = count)) +
geom_line()
# Duygu puanlarını gösteren box plot oluşturma
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot() +
coord_flip()
# duygu analizi için gereken kütüphaneleri yükleme
library(tidyverse)
library(tidytext)
library(sentimentr)
library(textdata)
library(tm)
# duygu analizi için gereken ayarları yapma
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# sonuçları görüntüleme
lutc_sentiment
# duygu analizi sonuçlarını grafiklerle gösterme
lutc_sentiment %>%
top_n(10, n) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
#grafik oluştururken hata oluşursa bunu çözmek için
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
lutc_sentiment
# duygu puanlarını gösteren bar chart oluşturma ilk 20 kelime
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
slice(1:20) %>%  # ilk 20 kelimeyi seçme
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
# duygu kategorilerinin dağılımını gösteren pie chart oluşturma ilk 20 kelime
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
slice(1:20) %>%  # ilk 20 kelimeyi seçme
ggplot(aes(x = "", y = n, fill = word)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text.x = element_blank())
#lutc_sentiment kelime filtreleme
lutc_sentiment %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar"))
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(20, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
#Emoji olmayan verileri ayrı bir veri setine atama
lutc_no_emoji <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
filter(emoji_count == 0)
#Emoji türlerinin bar chart oluşturma
lutc_emoji_types %>%
ggplot(aes(x = emoji_type, y = count)) +
geom_col()
#emoji anliziiiiiad
lutc_emoji_types <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n()) %>%
rename(emoji_type = emoji_count) %>%
mutate(emoji_type = ifelse(emoji_type == 0, "No Emoji",
ifelse(emoji_type == 1, "1 Emoji",
ifelse(emoji_type >= 2, "2 or More Emojis", NA))))
#emoji line chart
lutc_emoji_counts <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n())
lutc_emoji_counts %>%
ggplot(aes(x = emoji_count, y = count)) +
geom_line()
# duygu analizi için gereken kütüphaneleri yükleme
library(tidyverse)
library(tidytext)
library(sentimentr)
library(textdata)
library(tm)
# duygu analizi için gereken ayarları yapma
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# sonuçları görüntüleme
lutc_sentiment
# duygu analizi sonuçlarını grafiklerle gösterme
lutc_sentiment %>%
top_n(10, n) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
View(lutc)
# cümleleri ayıkla
lutc$sentences <- str_split(lutc$textOriginal, pattern = "\\.|\\?|\\!")
# cümle sayısını bul
lutc$sentence_count <- lengths(lutc$sentences)
# cümlelerin ortalama uzunluğunu bul
lutc$mean_sentence_length <- rowMeans(lutc$sentences, na.rm = TRUE)
# syuzhet fonksiyonunu kullanarak cümlelerin duygu analizini yap
lutc$sentiment <- sapply(lutc$textOriginal, get_nrc_sentiment)
# ggplot2 kütüphanesini yükle
install.packages("ggplot2")
# cümlelerin duygu analizini görselleştir
ggplot(lutc, aes(x = sentiment)) +
geom_histogram()
#emoji line chart
lutc_emoji_counts <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n())
# duygu analizi için gereken ayarları yapma
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# sonuçları görüntüleme
lutc_sentiment
# duygu analizi sonuçlarını grafiklerle gösterme
lutc_sentiment %>%
top_n(10, n) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
#grafik oluştururken hata oluşursa bunu çözmek için
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# duygu analizi için gereken kütüphaneleri yükleme
library(tidyverse)
library(tidytext)
library(sentimentr)
library(textdata)
library(tm)
# duygu analizi için gereken ayarları yapma
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# sonuçları görüntüleme
lutc_sentiment
# duygu analizi sonuçlarını grafiklerle gösterme
lutc_sentiment %>%
top_n(10, n) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
# duygu analizi için gereken ayarları yapma
lutc_sentiment <- lutc %>%
select(textOriginal) %>% # burada, duygu analizi yapmak istediğiniz sütunu seçin
unnest_tokens(word, textOriginal) %>%
filter(!word %in% stop_words$word) %>% # burada, durdurma kelimelerini filtreleme
anti_join(get_sentiments("bing")) %>% # burada, Bing duygu sözlüğü kullanılıyor
count(word, sort = TRUE)
# sonuçları görüntüleme
lutc_sentiment
# duygu analizi sonuçlarını grafiklerle gösterme
lutc_sentiment %>%
top_n(10, n) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
# duygu puanlarını gösteren bar chart oluşturma ilk 20 kelime
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
slice(1:20) %>%  # ilk 20 kelimeyi seçme
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip()
# duygu kategorilerinin dağılımını gösteren pie chart oluşturma ilk 20 kelime
lutc_sentiment %>%
mutate(word = reorder(word, n)) %>%
slice(1:20) %>%  # ilk 20 kelimeyi seçme
ggplot(aes(x = "", y = n, fill = word)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text.x = element_blank())
#lutc_sentiment kelime filtreleme
lutc_sentiment %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar"))
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(20, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(10, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(10, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
# İlk 20 kelime için box plot oluşturma
lutc_sentiment %>%
top_n(10, n) %>%
ggplot(aes(x = word, y = n)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "iyi", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
#box_plot
lutc_sentiment %>%
top_n(10, n) %>%
filter(!word %in% c("ve", "bir", "bu", "en", "o", "ya", "için", "de", "da", "ben", "var", "sen", "gibi", "çok", "daha", "ama", "olsun",
"hiç", "bi", "her", "yok", "seni", "yine", "ki", "bile", "ederim", "sana", "böyle", "mi", "kadar", "izlerken")) %>%
ggplot(aes(y = n, x = word)) +
geom_boxplot()
View(lutc)
# textOriginal sütununu seçin ve ilk 5 satırını görselleştirin
lutc %>%
select(textOriginal) %>%
head(5) %>%
# textOriginal sütunundaki ilk 5 kelimeyi görselleştirin
mutate(first_5_words = str_extract(textOriginal, "^\\b\\w+\\b(?:\\s+\\b\\w+\\b){0,4}")) %>%
# Görselleştirme işlemini yapın
ggplot(aes(x = first_5_words)) +
geom_bar(stat = "count")
# textOriginal sütununu seçin ve ilk 5 satırını görselleştirin
lutc %>%
select(textOriginal) %>%
head(1) %>%
# textOriginal sütunundaki ilk 5 kelimeyi görselleştirin
mutate(first_5_words = str_extract(textOriginal, "^\\b\\w+\\b(?:\\s+\\b\\w+\\b){0,4}")) %>%
# Görselleştirme işlemini yapın
ggplot(aes(x = first_5_words)) +
geom_bar(stat = "count")
View(temiz_t)
# textOriginal sütununu seçin ve ilk 5 satırını görselleştirin
temiz_t %>%
select(word) %>%
head(1) %>%
# textOriginal sütunundaki ilk 5 kelimeyi görselleştirin
mutate(first_5_words = str_extract(word, "^\\b\\w+\\b(?:\\s+\\b\\w+\\b){0,4}")) %>%
# Görselleştirme işlemini yapın
ggplot(aes(x = first_5_words)) +
geom_bar(stat = "count")
# textOriginal sütununu seçin ve ilk 5 satırını görselleştirin
temiz_t %>%
select(word) %>%
head(5) %>%
# textOriginal sütunundaki ilk 5 kelimeyi görselleştirin
mutate(first_5_words = str_extract(word, "^\\b\\w+\\b(?:\\s+\\b\\w+\\b){0,4}")) %>%
# Görselleştirme işlemini yapın
ggplot(aes(x = first_5_words)) +
geom_bar(stat = "count")
library(tidyverse)
library(textcat)
install.packages("textcat")
library(textcat)
# textOriginal sütununu seçin ve tüm satırları kullanın
lutc %>%
select(textOriginal) %>%
# Veriyi cümleler olarak bölün
mutate(sentences = str_split(textOriginal, "\\.|\\?|\\!")) %>%
unnest()
# textOriginal sütununu seçin ve tüm satırları kullanın
lutc %>%
select(textOriginal) %>%
# Veriyi cümleler olarak bölün
mutate(sentences = str_split(textOriginal, "\\.|\\?|\\!")) %>%
unnest() %>%
# Cümleleri "positive" veya "negative" olarak sınıflandırın
mutate(sentiment = textcat(sentences))
#emoji line chart
lutc_emoji_counts <- lutc %>%
select(textDisplay) %>%
mutate(emoji_count = str_count(textDisplay, pattern = "[^[:ascii:]]")) %>%
group_by(emoji_count) %>%
summarize(count = n())
# textOriginal sütununu seçin ve tüm satırları kullanın
lutc %>%
select(textOriginal) %>%
# Veriyi cümleler olarak bölün
mutate(sentences = str_split(textOriginal, "\\.|\\?|\\!")) %>%
unnest(cols = c(sentences)) %>%
# İlk 5 cümleyi seçin
head(5) %>%
# Cümleleri "positive" veya "negative" olarak sınıflandırın
mutate(sentiment = textcat(sentences))
# pozitif ve negatif kelime listelerini oluşturun
pos_words <- c("güzel", "mutlu", "başarılı", "iyi", "memnun")
neg_words <- c("kötü", "mutsuz", "başarısız", "kötü", "memnun değil")
# pozitif ve negatif sayılarını sıfırlayın
pos_count <- 0
neg_count <- 0
# verinizdeki kelimeleri gezinerek pozitif ve negatif sayılarını artırın
for (word in temiz_t$word) {
if (word %in% pos_words) {
pos_count <- pos_count + 1
} else if (word %in% neg_words) {
neg_count <- neg_count + 1
}
}
# pozitif ve negatif sayılarını yazdırın
print(paste("Pozitif sayısı:", pos_count))
print(paste("Negatif sayısı:", neg_count))
# pozitif ve negatif kelime listelerini oluşturun
pos_words <- c("güzel", "mutlu", "başarılı", "iyi", "memnun", "keyifle", "helal", "tebrik", "güzel", "kaliteli", "teşekkürler")
neg_words <- c("kötü", "mutsuz", "başarısız", "kötü", "memnun değil", "beğenmedim", "kalitesiz", "")
# pozitif ve negatif sayılarını sıfırlayın
pos_count <- 0
neg_count <- 0
# verinizdeki kelimeleri gezinerek pozitif ve negatif sayılarını artırın
for (word in temiz_t$word) {
if (word %in% pos_words) {
pos_count <- pos_count + 1
} else if (word %in% neg_words) {
neg_count <- neg_count + 1
}
}
# pozitif ve negatif sayılarını yazdırın
print(paste("Pozitif sayısı:", pos_count))
print(paste("Negatif sayısı:", neg_count))
